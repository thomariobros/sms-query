// Code generated for package run by go-bindata DO NOT EDIT. (@generated)
// sources:
// config/i18n/en_US.json
// config/i18n/fr_FR.json
package run

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configI18nEn_usJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\xc1\x8e\xda\x40\x0c\x40\xcf\xf0\x15\x16\x97\x5c\x28\x12\x57\x54\xf5\xde\x6f\x68\xab\xc8\x24\x66\x33\xdd\x89\x8d\x3c\x0e\x34\xaa\xf6\xdf\xab\x84\x40\x56\xdd\xc1\xd0\x9e\x56\x8b\x9f\x9f\x3d\xce\x24\x33\xdf\x96\x8b\xdf\xcb\xc5\x62\x15\xea\xd5\x0e\x56\xa4\x2a\xba\x5a\x0f\x3f\x98\x22\xa7\x88\x16\x84\x87\x48\x12\xd5\x7e\x0d\xc8\x30\x32\x20\x55\xd5\xa9\x52\xbd\x5a\x2e\xde\xd6\x4b\x80\xbf\x25\x9b\xb3\x0a\xbf\x94\x81\x8f\x9d\x79\xc2\x11\x83\x11\x4b\x17\xd7\xfb\x7e\x2a\x69\x5b\xe1\x4d\xa2\x23\x2a\x9a\xe8\x66\xf8\x01\xb3\xbe\x35\x3c\x95\x1e\x85\xb3\xe9\x3b\xc8\xac\xe4\x43\x7e\xd3\x1f\x1b\xca\x0b\xe0\x93\x63\x68\x03\x77\x46\x69\x93\x1a\xd1\xfc\x38\xda\xc0\x77\xd2\x91\xeb\x4d\xc7\xaf\x2c\xe7\x7c\xe1\x69\x90\x5f\xa1\x16\x60\x31\x18\x48\xb0\x26\x24\x98\xb2\x3f\xce\x25\x11\x6a\xd5\x6c\x02\x9f\x30\x86\x3a\x6f\x1d\x91\xab\x02\x26\xf4\x3b\xd3\x2f\x6c\x8f\x91\x76\x30\x01\x87\x8e\xb9\x87\xb3\x68\x9d\x79\x7c\x53\x1d\x96\xb2\x46\xcb\x3f\x36\x96\xab\x49\x29\x75\x31\xb7\x09\xae\x19\xe4\x36\x7c\xa3\xee\xf6\x0c\xc4\x60\x02\x07\xdd\xc1\x0c\xbf\xeb\xff\xdd\xe2\xe6\x38\x31\x1c\xd4\x5f\x65\xd5\x57\x51\xaa\x60\xbd\xdb\xdf\x8d\x72\x66\x3a\x33\x8c\x6c\x94\xe0\x05\x95\xa0\x45\x0d\x16\x5a\xf2\x2a\xe3\x09\x43\xc4\x7d\xa4\x72\x1f\x5e\x29\x65\x3b\xb8\x31\x70\x61\x9e\xd6\x95\xc9\x90\xeb\x67\xa4\x30\x91\x1f\xd4\xfb\x50\x45\x11\x77\x40\x17\xc4\x99\xce\x04\x3c\x98\xc9\x99\xd0\x1a\x52\xb7\xd4\xc4\xdc\xdf\x29\x35\xf6\x3b\xb8\x52\x97\x67\x31\x07\x1b\xe9\x74\x8e\x0e\xff\x4d\xc8\xfd\x66\x1e\xbc\x01\x43\x0c\x6e\x93\xbc\xaf\x51\x0c\xec\x2e\x6c\x00\x9c\x09\x8e\xe1\x47\xbd\x8e\x45\x58\xac\x9c\x1b\xba\x5b\x6a\x6c\x7c\xf8\xe8\xcc\xdb\xe0\x20\x3a\x7d\x7d\x82\xf5\x0f\xab\xb8\x63\x99\x4b\xfc\x87\xf4\x41\xfb\xff\x3a\x75\x96\x72\xf8\x7b\xc0\x18\xbd\x76\xc7\xb8\x6f\x8a\x72\xf6\x55\x51\xce\xcf\xba\x5a\xa9\x49\xd1\xc8\x17\x5e\xa9\x67\xad\x0d\xe1\xa9\xf7\x95\x23\xe2\xf8\x46\xfc\x28\x6a\x1b\x43\x7f\xcb\x1a\x7a\x3b\x76\x88\xda\x16\x8a\x88\x9d\x06\xd2\x54\x40\xb1\x27\xec\x7e\x4a\x50\x2a\xbc\xb2\xc9\xc2\xc1\x3f\xe0\x2c\x1c\xbc\xe3\x6d\x08\xb7\x5b\x28\x2a\xe1\x4a\xb4\xa6\x02\x0a\xd4\x17\x62\x0b\x4c\x45\xe6\xae\x31\x97\xc6\xfc\x09\x8f\x96\x39\xe0\xe7\xac\x48\x29\x95\xd6\x20\x97\xdb\xf2\x72\x5d\xc8\x5a\x3e\xc3\x36\x7f\x55\x98\x4d\xad\x28\x5d\x4d\xc3\xd7\x29\xeb\xf9\x02\xdb\xc6\x5b\x04\x4b\x99\x48\x4f\xa1\xba\xfb\xfa\x5c\xc3\x8e\x64\xba\xb6\x94\x31\x70\x5e\x33\x01\x30\x02\x4f\x88\x92\xc9\xd1\x15\x25\x39\xda\x33\xa2\x3a\x28\x55\x63\xb2\x67\x9b\xa9\xe5\xe2\x6d\xf9\x63\xf9\x27\x00\x00\xff\xff\xdb\x7e\x1c\xa4\x2d\x0b\x00\x00")

func configI18nEn_usJsonBytes() ([]byte, error) {
	return bindataRead(
		_configI18nEn_usJson,
		"config/i18n/en_US.json",
	)
}

func configI18nEn_usJson() (*asset, error) {
	bytes, err := configI18nEn_usJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/i18n/en_US.json", size: 2861, mode: os.FileMode(436), modTime: time.Unix(1632738572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configI18nFr_frJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x96\x41\x8e\xeb\x36\x0c\x86\xd7\xc9\x29\x88\x6c\xb2\x99\x06\xc8\x36\x28\x7a\x91\xb6\x30\x18\x8b\x19\xeb\x3d\x89\x34\x28\xca\x69\x50\xf4\x2e\x5d\x36\xbd\x86\x2f\x56\xd8\x49\x26\x99\x3e\x8d\xe3\x99\xd5\x60\x44\xf2\xfb\xa9\x5f\xb2\xc2\x5f\x97\x8b\x3f\x97\x8b\xc5\xca\xbb\xd5\x0e\x56\xa4\x2a\xba\x7a\x19\x16\x4c\x91\x53\x40\xf3\xc2\x43\xc4\xf5\xe7\x24\xa1\x3f\xbf\x40\x66\x02\x52\xa5\xac\x40\xc9\x20\x65\xed\x88\x33\xad\x96\x8b\xbf\x5e\x96\x00\xff\xa7\x6d\x8e\x2a\xfc\x5a\x79\x6e\xb3\x3d\x21\x47\xcc\x1d\xfa\x04\x2d\x2a\xc6\xfe\x1f\x53\x4a\x05\x6a\x2d\x31\x0a\x6f\x12\x0d\x69\x26\xba\x19\x16\xb0\x88\x7e\x81\x4b\xfd\x62\xba\x3c\x08\x17\xcb\x61\x07\x73\xf4\x9b\x53\xdb\xd0\x07\x84\x9f\x26\x08\xd1\x73\x36\x4a\x9b\xd4\x88\x96\xad\x89\x9e\x3f\x28\x47\x76\x9b\xcc\xdf\x59\x8e\x65\xe1\xbb\xa9\xdf\x08\x98\xa0\x96\xd8\x2a\xb1\x1b\xcc\x4d\x50\x93\xd9\xb8\x36\x70\xe8\x47\x8f\x12\xa1\xd6\xcd\xc6\x73\x87\xc1\xbb\xa2\xc0\xad\x18\x94\xea\x86\xb4\x6e\x08\xae\xe9\xf4\x1b\xd3\x1f\x14\xdb\x40\xbb\x87\x60\x14\x4b\x80\x31\x27\x64\x4b\x1f\x2a\xb2\x54\x0e\xad\x7c\x98\x43\xe3\x83\x5e\x7f\x4e\x39\x18\x96\x28\xb7\x0a\x9a\xd7\xba\x29\xba\x5c\x0f\xcb\x3f\xf6\x0e\xc4\xd0\x91\x26\x38\xe8\xee\x31\xf1\x90\x99\x4f\x70\x14\x75\xe9\x61\x9f\x0f\x09\xc4\x70\xd0\xc7\xb4\xc2\x15\x3c\xd5\x41\x6a\x6f\xa7\x79\x6d\xbe\xa5\x97\x1c\xbe\x07\x19\xd9\x28\xc1\x2b\x2a\x41\x44\xf5\xe6\x63\xe1\x68\xef\xda\xd8\xa1\x0f\xb8\x0f\x54\xed\xfd\x77\x4a\xc5\x1e\xba\xfe\x1c\x24\x81\xf3\xa9\x15\xf6\xfb\x40\x93\xbb\x79\x4f\xac\x92\x21\xbb\x32\xb7\x15\xcf\x96\xc0\xad\xd1\x0c\x87\xeb\x31\xa9\xb0\xf7\x75\x10\x99\x67\xd6\x25\xb7\xe4\xd4\x35\xf2\xc4\x9f\x23\xa1\x35\xa4\xf3\xc4\x22\x19\x15\xb4\xc0\xe1\x69\x77\x0d\x5e\x4e\x65\x08\xe1\x18\x6a\x28\x2b\xdd\x82\xe3\x3f\xd7\x94\x8f\x5b\x99\xfa\x28\x9c\x30\xf7\x67\x4a\xe0\x79\xd2\xc2\x1b\x4b\xd1\xf3\xbc\xbd\xb5\x21\xfb\xe2\x37\x7d\x09\x3c\x6b\x7a\x14\x62\xb1\xea\xed\x52\x94\xfb\x27\xed\x7c\x4d\xef\xda\x87\x56\xb2\x5e\xdf\xa8\xce\x87\x30\x71\x4a\x57\x95\xcf\xfa\xf3\x45\x85\x67\x7b\xf9\xca\x59\xb0\x54\xc3\xdf\x03\x86\x30\xf5\xea\xb5\xda\x9f\x6b\xdf\x7a\x1b\x03\xcf\xa0\x41\x8e\x4f\xa8\xef\x71\x70\xc0\x39\xbd\x46\x71\xa4\x68\xf4\x39\x76\x14\xd7\x9f\x75\x30\xe6\x09\xbe\x21\xec\x4e\x9f\xec\x5b\xb4\x78\x0b\xc7\xb2\x56\xd4\x36\x86\x33\xef\xbb\x61\xe1\x57\x60\x37\x2e\xdb\x16\xd6\x01\xb3\x7a\xd2\xb4\x86\xf5\x9e\x30\x7f\x13\xaf\xb4\x9e\x12\x4e\xe6\x0f\xf3\x94\x87\xcc\x92\xf4\xb8\x1e\xb7\xb0\xae\x85\x6b\x51\x47\x6b\x58\xa3\xbe\x12\x9b\x67\x5a\x97\x06\x8b\xbb\x3a\x96\x07\x8a\xfe\xef\xc9\xaa\x40\x29\x55\xd6\x20\x57\xdb\xea\x32\x9d\x14\x29\x3f\xc3\xb6\x3c\x99\xdc\x49\x51\x94\x6e\xa4\x46\x72\x79\xa6\xfc\x05\xb6\xcd\x94\x85\x2c\x55\xba\xbc\x0f\x53\x9f\xc6\x2d\x65\x02\x74\x9d\x94\xaa\xe0\xb9\x8c\x0a\xfe\x95\x87\x47\xa8\x16\x7e\x1b\x65\xa7\x51\xc9\xa4\x2d\xa2\x50\xb5\xff\xd7\x6e\xac\x39\x28\xe7\x95\xc6\xd9\xa1\xfc\xaa\xdc\xa2\xef\xda\x5b\xfe\xbe\xfc\x2f\x00\x00\xff\xff\x24\x9a\x59\x6a\xba\x0b\x00\x00")

func configI18nFr_frJsonBytes() ([]byte, error) {
	return bindataRead(
		_configI18nFr_frJson,
		"config/i18n/fr_FR.json",
	)
}

func configI18nFr_frJson() (*asset, error) {
	bytes, err := configI18nFr_frJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/i18n/fr_FR.json", size: 3002, mode: os.FileMode(436), modTime: time.Unix(1632738572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/i18n/en_US.json": configI18nEn_usJson,
	"config/i18n/fr_FR.json": configI18nFr_frJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"i18n": &bintree{nil, map[string]*bintree{
			"en_US.json": &bintree{configI18nEn_usJson, map[string]*bintree{}},
			"fr_FR.json": &bintree{configI18nFr_frJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
